package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"errors"
	"fmt"

	"cubawheeler.io/pkg/cubawheeler"
	"cubawheeler.io/pkg/graph/model"
)

// Owner is the resolver for the owner field.
func (r *adsResolver) Owner(ctx context.Context, obj *cubawheeler.Ads) (*cubawheeler.Client, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginRequest) (*cubawheeler.Token, error) {
	user, err := r.user.FindByEmail(ctx, input.Email)
	if err != nil {
		return nil, err
	}
	token, err := user.GenToken()
	if err != nil {
		return nil, err
	}
	// TODO: add tokens to redis cache to avoid inecesaries queries if the user is login
	return token, nil
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, email string, otp string) (*cubawheeler.Token, error) {
	_, err := r.user.FindByEmail(ctx, email)
	if err == nil {
		return nil, errors.New("email aready in use")
	}
	user := &cubawheeler.User{
		ID:    cubawheeler.NewID(),
		Email: email,
		Code:  cubawheeler.NewReferalCode(),
	}
	if err := r.user.CreateUser(ctx, user); err != nil {
		return nil, err
	}
	token, err := user.GenToken()
	if err != nil {
		return nil, err
	}
	return token, nil
}

// Otp is the resolver for the otp field.
func (r *mutationResolver) Otp(ctx context.Context, email string) (string, error) {
	panic(fmt.Errorf("not implemented: Otp - otp"))
}

// RequestTrip is the resolver for the requestTrip field.
func (r *mutationResolver) RequestTrip(ctx context.Context, pickUp float64, dropOff float64) (*cubawheeler.Trip, error) {
	panic(fmt.Errorf("not implemented: RequestTrip - requestTrip"))
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, profile model.UpdateProfile) (*cubawheeler.Profile, error) {
	panic(fmt.Errorf("not implemented: UpdateProfile - updateProfile"))
}

// UpdateTrip is the resolver for the updateTrip field.
func (r *mutationResolver) UpdateTrip(ctx context.Context, update *model.UpdateTrip) (*cubawheeler.Trip, error) {
	panic(fmt.Errorf("not implemented: UpdateTrip - updateTrip"))
}

// AddFavoritePlace is the resolver for the addFavoritePlace field.
func (r *mutationResolver) AddFavoritePlace(ctx context.Context, name string, lat float64, long float64) (*cubawheeler.Location, error) {
	panic(fmt.Errorf("not implemented: AddFavoritePlace - addFavoritePlace"))
}

// FavoritePlaces is the resolver for the favoritePlaces field.
func (r *mutationResolver) FavoritePlaces(ctx context.Context) ([]*cubawheeler.Location, error) {
	panic(fmt.Errorf("not implemented: FavoritePlaces - favoritePlaces"))
}

// AddFavoriteVehicle is the resolver for the addFavoriteVehicle field.
func (r *mutationResolver) AddFavoriteVehicle(ctx context.Context, plate *string) (*cubawheeler.Vehicle, error) {
	panic(fmt.Errorf("not implemented: AddFavoriteVehicle - addFavoriteVehicle"))
}

// FavoriteVehicles is the resolver for the favoriteVehicles field.
func (r *mutationResolver) FavoriteVehicles(ctx context.Context) ([]*cubawheeler.Vehicle, error) {
	panic(fmt.Errorf("not implemented: FavoriteVehicles - favoriteVehicles"))
}

// Dob is the resolver for the dob field.
func (r *profileResolver) Dob(ctx context.Context, obj *cubawheeler.Profile) (*string, error) {
	panic(fmt.Errorf("not implemented: Dob - dob"))
}

// User is the resolver for the user field.
func (r *profileResolver) User(ctx context.Context, obj *cubawheeler.Profile) (*cubawheeler.User, error) {
	user, err := r.user.FindByID(ctx, obj.UserID.String())
	if err != nil {
		return nil, err
	}
	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, filter *cubawheeler.UserFilter) ([]*cubawheeler.User, error) {
	user := cubawheeler.UserForContext(ctx)
	if user == nil {
		return nil, errors.New("invalid token")
	}
	users, _, err := r.user.FindAll(ctx, filter)
	if err != nil {
		return nil, err
	}
	return users, nil
}

// Trips is the resolver for the trips field.
func (r *queryResolver) Trips(ctx context.Context, user *string) ([]*cubawheeler.Trip, error) {
	panic(fmt.Errorf("not implemented: Trips - trips"))
}

// Charges is the resolver for the charges field.
func (r *queryResolver) Charges(ctx context.Context, user *string) ([]*cubawheeler.Charge, error) {
	panic(fmt.Errorf("not implemented: Charges - charges"))
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context, user *string) (*cubawheeler.Profile, error) {
	panic(fmt.Errorf("not implemented: Profile - profile"))
}

// LastNAddress is the resolver for the lastNAddress field.
func (r *queryResolver) LastNAddress(ctx context.Context, number int) ([]*string, error) {
	panic(fmt.Errorf("not implemented: LastNAddress - lastNAddress"))
}

// ExpiryAt is the resolver for the expiry_at field.
func (r *tokenResolver) ExpiryAt(ctx context.Context, obj *cubawheeler.Token) (int, error) {
	return int(obj.AccessTokenExpiresAt), nil
}

// Driver is the resolver for the driver field.
func (r *tripResolver) Driver(ctx context.Context, obj *cubawheeler.Trip) (*cubawheeler.User, error) {
	panic(fmt.Errorf("not implemented: Driver - driver"))
}

// Rider is the resolver for the rider field.
func (r *tripResolver) Rider(ctx context.Context, obj *cubawheeler.Trip) (*cubawheeler.User, error) {
	panic(fmt.Errorf("not implemented: Rider - rider"))
}

// StatusHistory is the resolver for the status_history field.
func (r *tripResolver) StatusHistory(ctx context.Context, obj *cubawheeler.Trip) ([]*model.TripStatusHistory, error) {
	panic(fmt.Errorf("not implemented: StatusHistory - status_history"))
}

// Coupon is the resolver for the coupon field.
func (r *tripResolver) Coupon(ctx context.Context, obj *cubawheeler.Trip) (*cubawheeler.Coupon, error) {
	panic(fmt.Errorf("not implemented: Coupon - coupon"))
}

// Review is the resolver for the review field.
func (r *tripResolver) Review(ctx context.Context, obj *cubawheeler.Trip) (*cubawheeler.Review, error) {
	panic(fmt.Errorf("not implemented: Review - review"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *cubawheeler.User) (string, error) {
	return obj.ID.String(), nil
}

// Password is the resolver for the password field.
func (r *userResolver) Password(ctx context.Context, obj *cubawheeler.User) (*string, error) {
	panic(fmt.Errorf("not implemented: Password - password"))
}

// Pin is the resolver for the pin field.
func (r *userResolver) Pin(ctx context.Context, obj *cubawheeler.User) (string, error) {
	panic(fmt.Errorf("not implemented: Pin - pin"))
}

// ActiveVehicle is the resolver for the active_vehicle field.
func (r *userResolver) ActiveVehicle(ctx context.Context, obj *cubawheeler.User) (*cubawheeler.Vehicle, error) {
	panic(fmt.Errorf("not implemented: ActiveVehicle - active_vehicle"))
}

// Plan is the resolver for the plan field.
func (r *userResolver) Plan(ctx context.Context, obj *cubawheeler.User) (*cubawheeler.Plan, error) {
	panic(fmt.Errorf("not implemented: Plan - plan"))
}

// Reviews is the resolver for the reviews field.
func (r *userResolver) Reviews(ctx context.Context, obj *cubawheeler.User) ([]*cubawheeler.Review, error) {
	panic(fmt.Errorf("not implemented: Reviews - reviews"))
}

// Model is the resolver for the model field.
func (r *vehicleResolver) Model(ctx context.Context, obj *cubawheeler.Vehicle) (string, error) {
	panic(fmt.Errorf("not implemented: Model - model"))
}

// Ads returns AdsResolver implementation.
func (r *Resolver) Ads() AdsResolver { return &adsResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Profile returns ProfileResolver implementation.
func (r *Resolver) Profile() ProfileResolver { return &profileResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Token returns TokenResolver implementation.
func (r *Resolver) Token() TokenResolver { return &tokenResolver{r} }

// Trip returns TripResolver implementation.
func (r *Resolver) Trip() TripResolver { return &tripResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// Vehicle returns VehicleResolver implementation.
func (r *Resolver) Vehicle() VehicleResolver { return &vehicleResolver{r} }

type adsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type profileResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type tokenResolver struct{ *Resolver }
type tripResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type vehicleResolver struct{ *Resolver }
