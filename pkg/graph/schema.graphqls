# GraphQL schema example
#
# https://gqlgen.com/getting-started/

enum Gender {
  FEMALE
  MALE
  NOT_DEFINED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  OFF
  ON_REVIEW
  SUSPENDED
}

enum ChannelEvent {
  UPDATE_LOCATION
  UPDATE_STATUS
  DRIVER_ARRIVING
  TRIP_ENDING
  NEW_ORDER
}

enum ShapeType {
  POINT
  LINE
  POLIGON
  MULTILINE
}

type GeoLocation {
  type: ShapeType!
  coordinates: [Float!]!
}

type Address {
  street1: String
  street2: String
  city: String
  state: String
  zip_code: String
}

type Location {
  name: String!
  user: String
  address: Address
  geo_location: GeoLocation!
}

enum Interval {
  DAY
  WEEK
  MONTH
  YEAR
}

type Plan {
  id: ID!
  name: String!
  recurrintg: Boolean!
  orders: Int!
  price: Int!
  interval: Interval!
  code: String!
}

enum VehicleCategory {
  X
  XL
  CONFORT
  GREEN
  PETS
  PACKAGE
  PRIORITY
}

enum Brand {
  BMW
}

enum Facilities {
  AIR_CONDITIONER
  PETS_ALLOWED
  SMOKE_ALLOWED
}

enum VehicleType {
  AUTO
  MOTO
  BIKE
}

enum VehicleStatus {
  NEW
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ApplicationType {
  RIDER
  DRIVER
}

type Application {
  id: ID!
  name: String!
  type: ApplicationType!
  client: String!
  secret: String!
}

type Vehicle {
  id: ID!
  plate: String
  category: VehicleCategory!
  brand: Brand!
  year: Int!
  model: String!
  seats: Int!
  status: VehicleStatus!
  color: String!
  type: VehicleType!
  photos: [String]
  facilities: [Facilities]
 }

 enum ProfileStatus {
  INCOMPLETED
  ON_REVIEW
  COMPLETED
 }
 
 type Profile {
  id: ID!
  name: String
  last_name: String
  dob: String
  phone: String!
  photo: String!
  gender: Gender
  licence: String
  circulation: String
  technic_inspection: String
  dni: String
  user: User!
  status: ProfileStatus
  prefered_currency: String
}

enum Role {
  RIDER
  DRIVER
  SALE
  ADMIN
  CLIENT
}

type Device {
  token: String!
  active: Boolean!
}
 
 type User {
  id: ID!
  email: String!
  password: String
  pin: String!
  otp: String!
  rate: Float
  available: Boolean
  status: UserStatus
  active_vehicle: Vehicle
  code: String!
  referer: ID!
  role: Role!
  profile: Profile!
  plan: Plan
  locations: [Location]
  vehicles: [Vehicle]
  favorite_vehicles: [Vehicle]
  orders: [Order]
  reviews: [Review]
  devices: [Device!]
}

enum OrderStatus {
  NEW
  PICKED_UP
  ON_THE_WAY
  DROPED_OFF
  CANCELED
}

type OrderStatusHistory {
  status: OrderStatus!
  changed_at: String!
}

enum CouponStatus {
  NEW
  ACTIVE
  INACTIVE
  REDEEMED
}

type Coupon {
  id: ID!
  code: String!
  percent: Float
  amount: Amount!
  status: CouponStatus!
  valid_from: Int
  valid_until: Int
}

type Point {
  lat: Float!
  long: Float!
}

type OrderItem {
  pick_up: Point
  drop_off: Point
}

type CategoryPrice {
  category: VehicleCategory!
  price: Int!
}

type WaitPoint {
  location: [Float!]
  name: String
}

type Maneuver {
  bearing_after: Int!
  bearing_before: Int!
  location: [Float!]
  modifier: String!
  type: String!
  instruction: String!
}

type VoiceInstructions {
  distanceAlongGeometry: Int!
  announcement: String!
  ssmlAnnouncement: String!
}

type Component {
  text: String!
}

type Primary {
  text: String!
  type: String!
  modifier: String!
  components: [Component]
}

type BannerInstructions {
  distanceAlongGeometry: Float!
  primary: Primary
  secondary: Primary
}

type Intersection {
  out: Int!
  entry: [Boolean]
  bearings: [Int]
  location: [Float!]
  in: Int
}

type Step {
  distance: Int!
  duration: Int!
  geometry: String!
  name: String!
  weight: Float!
  mode: String!
  driving_side: String!
  ref: String!
  maneuver: Maneuver
  voiceInstructions: [VoiceInstructions]
  bannerInstructions: [BannerInstructions]
  intersections: [Intersection]
}

type Legs {
  distance: Int!
  duration: Int!
  steps: [Step]
  summary: String!
  weight: Float!
}

type Route {
  distance: Int!
  duration: Int!
  geometry: String!
  waitpoints: [WaitPoint]
  weight: Float
  weight_name: String
  legs: [Legs]
}

type DirectionResponse {
  distance: Int!
  duration: Int!
  geometry: String!
  waitpoints: [WaitPoint]
  routes: [Route]
}

type Order {
  id: ID!
  rate: Int!
  price: Amount!
  rider: User!
  driver: User
  status: OrderStatus!
  status_history: [OrderStatusHistory]
  history: [Point]
  coupon: Coupon
  start_at: Int!
  end_at: Int!
  review: [Review]
  items: OrderItem!
  cost: [CategoryPrice!]
  selected_cost: CategoryPrice
  route: DirectionResponse
  route_string: String
}

type Client {
  id: ID!
  name: String!
  url: String
  facebook: String
  whatsapp: String
  telegram: String
  instagram: String
  ads: [Ads]
}

enum Impression {
  CLICK
}

enum AdsStatus {
  NEW
  ACTIVE
  INACTIVE
  SUSPENDED
}

type Ads {
  id: ID!
  name: String!
  description: String!
  photo: String!
  owner: Client!
  inpression: Impression
  status: AdsStatus!
  priority: Int!
  valid_from: Int!
  valid_until: Int!
}

enum MessageStatus {
  NEW
  READ
  DELETED
}

type Message {
  id: ID!
  order: ID!
  from: String!
  to: String!
  message: String!
  status: MessageStatus! 
}

type Review {
  id: ID!
  from: String!
  to: String!
  comment: String
  rate: Float!
}

enum ChargeStatus {
  SUCCEEDED
  PENDING
  FAILED
}

type Amount {
  amount: Int!
  currency: String!
}

type Charge {
  id: ID!
  amount: Amount!
  rider: User!
  description: String!
  order: Order!
  disputed: Boolean
  receipt_email: String!
  status: ChargeStatus!
  paid: Boolean
  method: String
  external_reference: String
  fees: [Rate]
}

type Rate {
  id: ID!
  code: String!
  base_price: Int!
  price_per_min: Int!
  price_per_km: Int!
  price_per_passenger: Int
  price_per_baggage: Int!
  price_per_carry_pet: Int!
  start_time: String
  end_time: String
  start_date: Int
  end_date: Int
  min_km: Int
  max_km: Int
}

type Token {
  access_token: String!
  expiry_at: Int!
}

input UserFilter {
  ids: [ID]
  email: String
  token: String
  limit: Int
  name: String
  otp: String
  pin: String
}

input OrderFilter {
  limit: Int
  token: String
  ids: [String]
  rider: ID
  driver: ID
  status: String
}

input ChargeRequest {
  limit: Int!
  token: String
  ids: [String]
  description: String
  order: String
  dispute: Boolean
  receipt_email: String
  status: ChargeStatus
  paid: Boolean
  method: String
  reference: String
  rider: String
  driver: String
}

type UserList {
  token: String!
  data: [User!]!
}

type OrderList {
  token: String!
  data: [Order!]!
}

type ChargeList {
  token: String!
  data: [Charge!]!
}

input ApplicationFilter {
  ids: [ID]
  limit: Int!
  token: String
  name: String
  client: String
}

type ApplicationList {
  token: String
  data: [Application]
}

type Response {
  message: String!
  code: Int!
  success: Boolean!
}

type NearByResponse {
  driver: User!
  location: Location!
}

enum ChargeMethod {
  CASH
  CARD
  BANK
  Paypal
  Bitcoin
  Ethereum
  Balance
  CUP_TRANSACTION
  MLC_TRANSACTION
}

type Query {
  users(filter: UserFilter): UserList!

  orders(filter: OrderFilter): OrderList!
  order(id: String!): Order!

  charges(filter: ChargeRequest!): ChargeList!
  charge(id: String): Charge

  me: Profile
  lastNAddress(number: Int!): [Location!]!

  findVehicle(vehicle: String!): Vehicle!

  findApplications(input: ApplicationFilter): ApplicationList!

  nearByDrivers(input: PointInput): [NearByResponse!]!
}

input UpdateProfile {
  name: String
  dob: String
  last_name: String
  gender: Gender
  phone: String
  photo: String
  license: String
  circulation: Upload
  technic_inspection: Upload
  dni: String
}

input UpdateOrder {
  driver: ID
  items: [Item]
  status: OrderStatus
}

input LoginRequest {
  email: String!
  otp: String!
}

input PointInput {
  lat: Float!
  lng: Float!
}

input Item {
  pick_up: PointInput!
  drop_off: PointInput!
}

input AddPlace {
  name: String!
  lat: Float!
  long: Float!
}

input UpdateVehicle {
  id: ID!
  palte: String
  category: VehicleCategory
  year: Int
  vehicleType: VehicleType
  facilities: [Facilities]
  pictures: [Upload]
}

input UpdatePlace {
  name: String!
  location: PointInput
}

input RateRequest {
  id: ID!
  code: String!
  base_price: Int!
  price_per_min: Int
  price_per_km: Int
  price_per_passenger: Int
  price_per_baggage: Int
  start_time: String
  end_time: String
  start_date: Int
  end_date: Int
  min_km: Int
  max_km: Int
  high_demand: Boolean
}

scalar Upload

input ApplicationRequest {
  name: String!
  type: ApplicationType!
  client: String!
  secret: String!
}

input DirectionRequest {
  id: ID
  points: [PointInput!]!
  coupon: String
  riders: Int
  baggages: Boolean
  currency: String
}

type CostPerBrand {
  id: ID!
  brand: Brand!
  price: Int!
}

input ConfirmOrder {
  order: String!
  category: VehicleCategory!
  method: ChargeMethod!
  currency: String!
}

type Mutation {
  login(input: LoginRequest!): Token!
  otp(email: String!): Response!

  updateProfile(profile: UpdateProfile!): Response!
  changePin(old: String, pin: String!): Response!
  addDevice(decive: String!): Response!

  createOrder(input: DirectionRequest): Order!
  updateOrder(input: DirectionRequest): Order!
  confirmOrder(confirm: ConfirmOrder!): Response!
  cancelOrder(order: String!): Response!
  acceptOrder(order: String!): Response!
  startOrder(order: String!): Response!

  addFavoritePlace(place: AddPlace!): Location
  favoritePlaces: [Location!]!
  updatePlace(input: UpdatePlace): Location!

  addFavoriteVehicle(plate: String): Vehicle
  favoriteVehicles: [Vehicle]
  updateVehicle(input: UpdateVehicle): Vehicle!

  addRate(input: RateRequest!): Rate!
  updateRate(input: RateRequest!): Rate!

  createApplication(input: ApplicationRequest!): Application!
  updateApplicationCredentials(application: String!): Application!

  redeem(input: String!): Response!
}
