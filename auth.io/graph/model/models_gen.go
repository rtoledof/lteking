// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type Error struct {
	Field   string `json:"field"`
	Message string `json:"message"`
}

type FavoritePlaceInput struct {
	Name string  `json:"name"`
	Lat  float64 `json:"lat"`
	Lng  float64 `json:"lng"`
}

// Structure that contain list of vehicles response.
type ListVechicleResponse struct {
	// List of vehicles
	Items []*Vehicle `json:"items,omitempty"`
	// Next page token
	NextToken *string `json:"nextToken,omitempty"`
}

// Specify a location that can be stored by the riders.
type Location struct {
	// Unique identifier
	ID string `json:"id"`
	// Name of the location
	Name string `json:"name"`
	// Geographic coordinates
	Point *Point `json:"point"`
	// Address line 1
	Line1 *string `json:"line1,omitempty"`
	// Address line 2
	Line2 *string `json:"line2,omitempty"`
	// City
	City *string `json:"city,omitempty"`
	// State
	State *string `json:"state,omitempty"`
	// Country
	Country *string `json:"country,omitempty"`
	// Zip code
	Zip *string `json:"zip,omitempty"`
}

// Input request used to add a location.
type LocationInput struct {
	// Name of the location
	Name string `json:"name"`
	// Geographic coordinates
	Point *PointInput `json:"point"`
	// Address line 1
	Line1 *string `json:"line1,omitempty"`
	// Address line 2
	Line2 *string `json:"line2,omitempty"`
	// City
	City *string `json:"city,omitempty"`
	// State
	State *string `json:"state,omitempty"`
	// Country
	Country *string `json:"country,omitempty"`
	// Zip code
	Zip *string `json:"zip,omitempty"`
}

type LoginResponse struct {
	Success bool     `json:"success"`
	Message *string  `json:"message,omitempty"`
	Errors  []*Error `json:"errors,omitempty"`
	Token   *string  `json:"token,omitempty"`
}

type Mutation struct {
}

// Input request used to the otp.
type OtpInput struct {
	// Phone number of the user
	Phone *string `json:"phone,omitempty"`
	// Email of the user
	Email *string `json:"email,omitempty"`
}

// Specify a point in space in WGS84 coordinates.
type Point struct {
	// Latitude
	Lat float64 `json:"lat"`
	// Longitude
	Lng float64 `json:"lng"`
}

// Input request used to add a location.
type PointInput struct {
	// Latitude
	Lat float64 `json:"lat"`
	// Longitude
	Lng float64 `json:"lng"`
}

// Contains the user information.
type Profile struct {
	// Unique identifier
	ID string `json:"id"`
	// First name of the user
	FirstName string `json:"firstName"`
	// last name of the user
	LastName string `json:"lastName"`
	// Email of the user
	Email string `json:"email"`
	// Phone number of the user
	Phone *string `json:"phone,omitempty"`
	// Rate of the user
	Rate float64 `json:"rate"`
	// Number of trips
	Photo *string `json:"photo,omitempty"`
	// Status of the user
	Status *string `json:"status,omitempty"`
	// User date of birth
	Dob *string `json:"dob,omitempty"`
	// User referal code
	ReferalCode *string `json:"referalCode,omitempty"`
	// Avalability of the user. Used to know if the user is online or not
	Available bool `json:"available"`
	// Driver active vehicle
	ActiveVehicle *Vehicle `json:"activeVehicle,omitempty"`
	// Prefered currency
	PreferedCurrency *string `json:"preferedCurrency,omitempty"`
}

// Input request used to update the profile.
type ProfileInput struct {
	// Name of the user
	FirstName *string `json:"firstName,omitempty"`
	// Last name of the user
	LastName *string `json:"lastName,omitempty"`
	// Email of the user
	Email *string `json:"email,omitempty"`
	// Phone number of the user
	Phone *string `json:"phone,omitempty"`
	// User profile photo
	Photo *string `json:"photo,omitempty"`
	// User date of birth
	Dob *string `json:"dob,omitempty"`
	// User referal code. The code of the user that refered to the current user
	ReferalCode *string `json:"referalCode,omitempty"`
	// Prefered currency
	PreferedCurrency *string `json:"preferedCurrency,omitempty"`
	// User gender. This will be usefull to include later on the find for an specific type of gender
	Gender *Gender `json:"gender,omitempty"`
	// User id card
	Dni *string `json:"dni,omitempty"`
	// User driver licence
	Licence *graphql.Upload `json:"licence,omitempty"`
	// User vehicle circulation
	Circulation *graphql.Upload `json:"circulation,omitempty"`
	// User vehicle technical inspection
	TechnicalInspection *graphql.Upload `json:"technicalInspection,omitempty"`
	// User vehicle insurance
	Insurance *graphql.Upload `json:"insurance,omitempty"`
}

type Query struct {
}

type Response struct {
	Success bool     `json:"success"`
	Message *string  `json:"message,omitempty"`
	Errors  []*Error `json:"errors,omitempty"`
}

// Contains the vehicle information.
type Vehicle struct {
	// Unique identifier
	ID string `json:"id"`
	// Name of the vehicle
	Name string `json:"name"`
	// Category of the vehicle
	Category VechicleCategory `json:"category"`
	// Type of the vehicle
	Type VechicleType `json:"type"`
	// Brand of the vehicle
	Brand Brand `json:"brand"`
	// Model of the vehicle
	Model string `json:"model"`
	// Color of the vehicle
	Colors []string `json:"colors,omitempty"`
	// Plate number of the vehicle
	PlateNumber string `json:"plateNumber"`
	// Photos of the vehicle
	Photo []string `json:"photo,omitempty"`
	// Status of the vehicle
	Status *VechicleStatus `json:"status,omitempty"`
	// Facilities of the vehicle
	Facilities []Facilities `json:"facilities,omitempty"`
	// Number of seats
	Seats int `json:"seats"`
	// Creation date
	CreatedAt string `json:"createdAt"`
	// Year of the vehicle
	Year *int `json:"year,omitempty"`
}

// Input request used to filter the list of vehicles.
type VehicleFilter struct {
	// Category of the vehicle
	Category *VechicleCategory `json:"category,omitempty"`
	// Type of the vehicle
	Type *VechicleType `json:"type,omitempty"`
	// Brand of the vehicle
	Brand *Brand `json:"brand,omitempty"`
	// Model of the vehicle
	Model *string `json:"model,omitempty"`
	// Colors of the vehicle
	Colors []string `json:"colors,omitempty"`
	// Plate number of the vehicle
	PlateNumber *string `json:"plateNumber,omitempty"`
	// Status of the vehicle
	Status *VechicleStatus `json:"status,omitempty"`
	// Facilities of the vehicle
	Facilities []Facilities `json:"facilities,omitempty"`
	// Number of seats
	Seats *int `json:"seats,omitempty"`
	// Number of items to return
	Limit *int `json:"limit,omitempty"`
	// Next page token
	Token *string `json:"token,omitempty"`
}

// Input request used to add a vehicle.
type VehicleInput struct {
	// Name of the vehicle if any
	Name *string `json:"name,omitempty"`
	// Category of the vehicle
	Category *VechicleCategory `json:"category,omitempty"`
	// Type of the vehicle
	Type *VechicleType `json:"type,omitempty"`
	// Brand of the vehicle
	Brand *Brand `json:"brand,omitempty"`
	// Model of the vehicle
	Model *string `json:"model,omitempty"`
	// Colors of the vehicle
	Colors []string `json:"colors,omitempty"`
	// Plate number of the vehicle
	PlateNumber *string `json:"plateNumber,omitempty"`
	// Photos of the vehicle
	Photo []*graphql.Upload `json:"photo,omitempty"`
	// Status of the vehicle
	Status *VechicleStatus `json:"status,omitempty"`
	// Facilities of the vehicle
	Facilities []Facilities `json:"facilities,omitempty"`
	// Number of seats
	Seats *int `json:"seats,omitempty"`
	// Year of the vehicle
	Year *int `json:"year,omitempty"`
}

// Specify the brand of the vehicle.
type Brand string

const (
	BrandToyota     Brand = "TOYOTA"
	BrandHonda      Brand = "HONDA"
	BrandSuzuki     Brand = "SUZUKI"
	BrandNissan     Brand = "NISSAN"
	BrandBmw        Brand = "BMW"
	BrandMercedes   Brand = "MERCEDES"
	BrandAudi       Brand = "AUDI"
	BrandVolkswagen Brand = "VOLKSWAGEN"
	BrandHyundai    Brand = "HYUNDAI"
	BrandKia        Brand = "KIA"
	BrandMazda      Brand = "MAZDA"
	BrandMitsubishi Brand = "MITSUBISHI"
	BrandFord       Brand = "FORD"
	BrandChevrolet  Brand = "CHEVROLET"
	BrandOther      Brand = "OTHER"
)

var AllBrand = []Brand{
	BrandToyota,
	BrandHonda,
	BrandSuzuki,
	BrandNissan,
	BrandBmw,
	BrandMercedes,
	BrandAudi,
	BrandVolkswagen,
	BrandHyundai,
	BrandKia,
	BrandMazda,
	BrandMitsubishi,
	BrandFord,
	BrandChevrolet,
	BrandOther,
}

func (e Brand) IsValid() bool {
	switch e {
	case BrandToyota, BrandHonda, BrandSuzuki, BrandNissan, BrandBmw, BrandMercedes, BrandAudi, BrandVolkswagen, BrandHyundai, BrandKia, BrandMazda, BrandMitsubishi, BrandFord, BrandChevrolet, BrandOther:
		return true
	}
	return false
}

func (e Brand) String() string {
	return string(e)
}

func (e *Brand) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Brand(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Brand", str)
	}
	return nil
}

func (e Brand) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specify the facilities of the vehicle.
type Facilities string

const (
	FacilitiesAc      Facilities = "AC"
	FacilitiesMusic   Facilities = "MUSIC"
	FacilitiesWifi    Facilities = "WIFI"
	FacilitiesTv      Facilities = "TV"
	FacilitiesCharger Facilities = "CHARGER"
	FacilitiesOther   Facilities = "OTHER"
)

var AllFacilities = []Facilities{
	FacilitiesAc,
	FacilitiesMusic,
	FacilitiesWifi,
	FacilitiesTv,
	FacilitiesCharger,
	FacilitiesOther,
}

func (e Facilities) IsValid() bool {
	switch e {
	case FacilitiesAc, FacilitiesMusic, FacilitiesWifi, FacilitiesTv, FacilitiesCharger, FacilitiesOther:
		return true
	}
	return false
}

func (e Facilities) String() string {
	return string(e)
}

func (e *Facilities) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Facilities(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Facilities", str)
	}
	return nil
}

func (e Facilities) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specify the gender of the user.
type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderOther  Gender = "OTHER"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specify the category of the vehicle.
type VechicleCategory string

const (
	VechicleCategoryPets      VechicleCategory = "PETS"
	VechicleCategoryLuxury    VechicleCategory = "LUXURY"
	VechicleCategoryPackage   VechicleCategory = "PACKAGE"
	VechicleCategoryEconomy   VechicleCategory = "ECONOMY"
	VechicleCategoryPremium   VechicleCategory = "PREMIUM"
	VechicleCategoryPreiority VechicleCategory = "PREIORITY"
)

var AllVechicleCategory = []VechicleCategory{
	VechicleCategoryPets,
	VechicleCategoryLuxury,
	VechicleCategoryPackage,
	VechicleCategoryEconomy,
	VechicleCategoryPremium,
	VechicleCategoryPreiority,
}

func (e VechicleCategory) IsValid() bool {
	switch e {
	case VechicleCategoryPets, VechicleCategoryLuxury, VechicleCategoryPackage, VechicleCategoryEconomy, VechicleCategoryPremium, VechicleCategoryPreiority:
		return true
	}
	return false
}

func (e VechicleCategory) String() string {
	return string(e)
}

func (e *VechicleCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VechicleCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VechicleCategory", str)
	}
	return nil
}

func (e VechicleCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specify the status of the vehicle.
type VechicleStatus string

const (
	VechicleStatusNew       VechicleStatus = "NEW"
	VechicleStatusActive    VechicleStatus = "ACTIVE"
	VechicleStatusInactive  VechicleStatus = "INACTIVE"
	VechicleStatusSuspended VechicleStatus = "SUSPENDED"
	VechicleStatusDeleted   VechicleStatus = "DELETED"
)

var AllVechicleStatus = []VechicleStatus{
	VechicleStatusNew,
	VechicleStatusActive,
	VechicleStatusInactive,
	VechicleStatusSuspended,
	VechicleStatusDeleted,
}

func (e VechicleStatus) IsValid() bool {
	switch e {
	case VechicleStatusNew, VechicleStatusActive, VechicleStatusInactive, VechicleStatusSuspended, VechicleStatusDeleted:
		return true
	}
	return false
}

func (e VechicleStatus) String() string {
	return string(e)
}

func (e *VechicleStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VechicleStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VechicleStatus", str)
	}
	return nil
}

func (e VechicleStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Specify the type of the vehicle.
type VechicleType string

const (
	VechicleTypeCar   VechicleType = "CAR"
	VechicleTypeBike  VechicleType = "BIKE"
	VechicleTypeTruck VechicleType = "TRUCK"
	VechicleTypeVan   VechicleType = "VAN"
	VechicleTypeBus   VechicleType = "BUS"
	VechicleTypeOther VechicleType = "OTHER"
)

var AllVechicleType = []VechicleType{
	VechicleTypeCar,
	VechicleTypeBike,
	VechicleTypeTruck,
	VechicleTypeVan,
	VechicleTypeBus,
	VechicleTypeOther,
}

func (e VechicleType) IsValid() bool {
	switch e {
	case VechicleTypeCar, VechicleTypeBike, VechicleTypeTruck, VechicleTypeVan, VechicleTypeBus, VechicleTypeOther:
		return true
	}
	return false
}

func (e VechicleType) String() string {
	return string(e)
}

func (e *VechicleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VechicleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VechicleType", str)
	}
	return nil
}

func (e VechicleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
