package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"

	"identity.io/graph/model"
	"identity.io/pkg/identity"
)

// Otp is the resolver for the otp field.
func (r *mutationResolver) Otp(ctx context.Context, input model.OtpInput) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	var msg string
	if input.Email == nil {
		rsp.Success = false
		msg = "email is required"
	}
	otp, err := r.otp.Create(ctx, *input.Email)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	if otp != "" {
		rsp.Message = &otp
	}
	if msg != "" {
		rsp.Success = false
	}
	return rsp, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.OtpInput, otp string) (*model.LoginResponse, error) {
	rsp := &model.LoginResponse{
		Success: true,
	}

	if input.Email == nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: "email is required",
		})
	}
	if otp == "" {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: "otp is required",
		})
	}

	user, err := r.identity.Login(ctx, *input.Email, otp)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	jwt, err := r.identity.Token(ctx, user)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	rsp.Token = &jwt
	return rsp, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	err := r.identity.Logout(ctx)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	return rsp, nil
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.ProfileInput) (*model.Profile, error) {
	err := r.identity.UpdateProfile(ctx, assembleUpdateProfile(input))
	if err != nil {
		return nil, err
	}
	profile, err := r.identity.Me(ctx)
	return assembleModelProfile(profile), err
}

// AddVehicle is the resolver for the addVehicle field.
func (r *mutationResolver) AddVehicle(ctx context.Context, input model.VehicleInput) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	vehicle, err := assembleVehicle(input)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	err = r.identity.AddVehicle(ctx, vehicle)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	return rsp, nil
}

// UpdateVehicle is the resolver for the updateVehicle field.
func (r *mutationResolver) UpdateVehicle(ctx context.Context, id string, input model.VehicleInput) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	vehicle, err := assembleVehicle(input)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	err = r.identity.UpdateVehicle(ctx, vehicle)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	return rsp, nil
}

// DeleteVehicle is the resolver for the deleteVehicle field.
func (r *mutationResolver) DeleteVehicle(ctx context.Context, id string) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	err := r.identity.DeleteVehicle(ctx, id)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	return rsp, nil
}

// AddFavoriteDirection is the resolver for the addFavoriteDirection field.
func (r *mutationResolver) AddFavoriteDirection(ctx context.Context, input model.FavoritePlaceInput) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	if input.Name == "" {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: "name is required",
		})
		return rsp, nil
	}
	_, err := r.identity.AddFavoritePlace(ctx, input.Name, identity.Point{
		Lat: input.Lat,
		Lng: input.Lng,
	})
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	return rsp, nil
}

// DeleteDirection is the resolver for the deleteDirection field.
func (r *mutationResolver) DeleteDirection(ctx context.Context, id string) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	err := r.identity.DeleteFavoritePlace(ctx, id)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	return rsp, nil
}

// UpdateDirection is the resolver for the updateDirection field.
func (r *mutationResolver) UpdateDirection(ctx context.Context, id string, input model.LocationInput) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	if input.Point == nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: "point is required",
		})
		return rsp, nil
	}
	err := r.identity.UpdateFavoritePlace(ctx, id, identity.UpdatePlace{
		Name: input.Name,
		Location: &identity.LocationInput{
			Lat:  input.Point.Lat,
			Long: input.Point.Lng,
		},
	})
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})

	}
	return rsp, nil
}

// AddFavoriteVehicle is the resolver for the addFavoriteVehicle field.
func (r *mutationResolver) AddFavoriteVehicle(ctx context.Context, plate string, name *string) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	err := r.identity.AddFavoriteVehicle(ctx, plate, name)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	return rsp, nil
}

// RemoveFavoriteVehicle is the resolver for the removeFavoriteVehicle field.
func (r *mutationResolver) RemoveFavoriteVehicle(ctx context.Context, plate string) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	err := r.identity.DeleteFavoriteVehicle(ctx, plate)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})

	}
	return rsp, nil
}

// SetActiveVehicle is the resolver for the setActiveVehicle field.
func (r *mutationResolver) SetActiveVehicle(ctx context.Context, id string) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	err := r.identity.SetActiveVehicle(ctx, id)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})

	}
	return rsp, nil
}

// SetAvailable is the resolver for the setAvailable field.
func (r *mutationResolver) SetAvailable(ctx context.Context, available bool) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	err := r.identity.SetAvailability(ctx, available)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})
	}
	return rsp, nil
}

// SetPreferedCurrency is the resolver for the setPreferedCurrency field.
func (r *mutationResolver) SetPreferedCurrency(ctx context.Context, currency string) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	err := r.identity.SetPreferedCurrency(ctx, currency)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})

	}
	return rsp, nil
}

// AddDeviceToken is the resolver for the addDeviceToken field.
func (r *mutationResolver) AddDeviceToken(ctx context.Context, token string, name *string) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	err := r.identity.AddDeviceToken(ctx, token, *name)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})

	}
	return rsp, nil
}

// RemoveDeviceToken is the resolver for the removeDeviceToken field.
func (r *mutationResolver) RemoveDeviceToken(ctx context.Context, token string) (*model.Response, error) {
	rsp := &model.Response{
		Success: true,
	}
	err := r.identity.RemoveDeviceToken(ctx, token)
	if err != nil {
		rsp.Success = false
		rsp.Errors = append(rsp.Errors, &model.Error{
			Message: err.Error(),
		})

	}
	return rsp, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.Profile, error) {
	profile, err := r.identity.Me(ctx)
	return assembleModelProfile(profile), err
}

// Vehicle is the resolver for the vehicle field.
func (r *queryResolver) Vehicle(ctx context.Context, id string) (*model.Vehicle, error) {
	vehicle, err := r.identity.Vehicle(ctx, id)
	if err != nil {
		return nil, err
	}
	return assembleModelVehicle(vehicle)
}

// Vehicles is the resolver for the vehicles field.
func (r *queryResolver) Vehicles(ctx context.Context) ([]*model.Vehicle, error) {
	vehicles, err := r.identity.Vehicles(ctx)
	if err != nil {
		return nil, err
	}
	return assembleVehicles(vehicles)
}

// Places is the resolver for the places field.
func (r *queryResolver) Places(ctx context.Context) ([]*model.Location, error) {
	location, err := r.identity.FavoritePlaces(ctx)
	if err != nil {
		return nil, err
	}
	return assembleLocations(location)
}

// Place is the resolver for the place field.
func (r *queryResolver) Place(ctx context.Context, name string) (*model.Location, error) {
	location, err := r.identity.FavoritePlace(ctx, name)
	if err != nil {
		return nil, err
	}
	return assembleLocation(location)
}

// LastDirections is the resolver for the lastDirections field.
func (r *queryResolver) LastDirections(ctx context.Context, number *int) ([]*model.Location, error) {
	locations, err := r.identity.LastNAddress(ctx, *number)
	if err != nil {
		return nil, err
	}
	return assembleLocations(locations)
}

// FindVehicle is the resolver for the findVehicle field.
func (r *queryResolver) FindVehicle(ctx context.Context, id string) (*model.Vehicle, error) {
	vehicle, err := r.identity.Vehicle(ctx, id)
	if err != nil {
		return nil, err
	}
	return assembleModelVehicle(vehicle)
}

// ListVehicles is the resolver for the listVehicles field.
func (r *queryResolver) ListVehicles(ctx context.Context, filter model.VehicleFilter) (*model.ListVechicleResponse, error) {
	vechicles, err := r.identity.Vehicles(ctx)
	if err != nil {
		return nil, err
	}
	vehicles, err := assembleVehicles(vechicles)
	if err != nil {
		return nil, err
	}
	return &model.ListVechicleResponse{
		Items: vehicles,
	}, nil
}

// FindDirection is the resolver for the findDirection field.
func (r *queryResolver) FindDirection(ctx context.Context, name string) (*model.Location, error) {
	location, err := r.identity.FavoritePlace(ctx, name)
	if err != nil {
		return nil, err
	}
	return assembleLocation(location)
}

// ListDirections is the resolver for the listDirections field.
func (r *queryResolver) ListDirections(ctx context.Context) ([]*model.Location, error) {
	location, err := r.identity.FavoritePlaces(ctx)
	if err != nil {
		return nil, err
	}
	return assembleLocations(location)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
